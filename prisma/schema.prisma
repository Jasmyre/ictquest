datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}


model User {
  id               String            @id @default(cuid())
  name             String
  userName         String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole          @default(USER)
  accounts         Account[]
  progressData     ProgressData[]
  userAchievements UserAchievement[]
}

model ProgressData {
  id        String   @id @default(cuid())
  userId    String
  topic     String
  subtopics String[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Achievement {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  userAchievements UserAchievement[]
}

model UserAchievement {
  id                     Int         @id @default(autoincrement())
  user                   User        @relation(fields: [userId], references: [id])
  userId                 String
  achievement            Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId          Int
  achievementName        String      @default("Unknown Achievement")
  achievementDescription String      @default("Unknown Achievement")
  unlockedAt             DateTime    @default(now())

  @@unique([userId, achievementId])
}
